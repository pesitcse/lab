6.)6.)Heap Sort algorithm
#include<stdio.h>
#include<conio.h>
void heapify(int a[],int n)
{int i,j,k,item;
for(k=1;k<n;k++){
item=a[k];
i=k;
j=(i-1)/2;
while(i>0 && item>a[j])
{a[i]=a[j];
i=j;
j=(i-1)/2;}
a[i]=item;}}
void adjust(int a[],int n)
{int i,j,item;
j=0;
item=a[j];
i=2*j+1;
while(i<=n-1){
if(i+1<=n-1)
if(a[i]<a[i+1])
i++;
if(item<a[i]){
a[j]=a[i];
j=i;
i=2*j+1;}
else
break;}
a[j]=item;}
void heapsort(int a[],int n)
{int i,temp;
heapify(a,n);
for(i=n-1;i>0;i--)
{temp=a[0];
a[0]=a[i];
a[i]=temp;
adjust(a,i);}}
int main()
{int a[20],n,temp,i;
printf("enter the number of elements to sort\n");
scanf("%d",&n);
printf("enter elements to sort\n");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
heapsort(a,n);
printf("the sorted array is\n");
for(i=0;i<n;i++)
{printf("%d\t",a[i]);}}


7.)Knapsack problem 
#include<stdio.h>
int max(int a,int b)
{return a>b?a:b;}
void knapsack(int n,int w[],
int m,int v[][10],int p[])
{int i,j;
for(i=0;i<=n;i++){
for(j=0;j<=m;j++)
{if(i==0||j==0)
v[i][j]=0;
else if(j<w[i])
v[i][j]=v[i-1][j];
else
v[i][j]=max(v[i-1][j],v[i-1][j-w[i]]+p[i]);}}}
void print_optimal_sol(int n,int m,
int w[],int v[10][10])
{int i,j,x[10];
printf("\nThe optimal solution is %d:\n",v[n][m]);
for(i=0;i<n;i++)
x[i]=0;
i=n; j=m;
while(i!=0  && j!=0)
{if(v[i][j]!=v[i-1][j])
{x[i]=1;
j=j-w[i];}
i=i-1;}
for(i=1;i<=n;i++){
printf("x[%d]",i);}
printf("=");
for(i=1;i<=n;i++){
printf("%d  ",x[i]);}}
void main(){
int m,n,i,j;
int p[10];
int w[10],v[10][10];
printf("\n Enter the number of objects\n");
scanf("%d",&n);
printf("\nEnter the weights of n objects:");
for(i=1;i<=n;i++)
scanf("%d",&w[i]);
printf("Enter the profits of n objects\n");
for(i=1;i<=n;i++)
scanf("%d",&p[i]);
printf("\nEnter the capacity of knapsack\n");
scanf("%d",&m);
knapsack(n,w,m,v,p);
printf("The output is\n");
for(i=0;i<=n;i++)
{for(j=0;j<=m;j++){
printf("%d   ",v[i][j]);}
printf("\n");}
print_optimal_sol(n,m,w,v);}


8.)8.)Dijikstra’s algorithm

#include<stdio.h>
#include<conio.h>
int cost[10][10],d[10], p[10], n;
void dij(int source,int dest)
{int i,j,u,v,min,S[10];
for(i=0;i<n;i++)
{d[i]=cost[source][i];
S[i]=0;
p[i]=source;}
S[source]=1;
for(i=1;i<n;i++)
{min=999;
u=-1;
for(j=0;j<n;j++)
{if(d[j]<min &&S[j]==0)
{min=d[j];
u=j;}}
if(u==-1)
return;
S[u]=1;
if(u==dest)
return;
for(v=0;v<n;v++)
{if((d[u]+cost[u][v]<d[v]) &&S[v]==0)
{d[v]=d[u]+cost[u][v];
p[v]=u;}}}}
void print_path(int source)
{int destination,i;
for(destination=0;destination<n;destination++)
{dij(source,destination);
if(d[destination]==999)
printf("\n %d is not reachable from %d",
destination,source);
else{
printf("\nThe shortest path from source to 
every other vertices are:\n");
i=destination;
while(i!=source)
{printf("%d <-- ",i);
i=p[i];}
printf("%d=%d\n",i, d[destination]);
}}}void main()
{int i,j,source;
printf("\n Enter the number of nodes:");
scanf("%d",&n);
printf("\n Enter the cost adjacency matrix:\n");
for(i=1;i<=n;i++)
{for(j=1;j<=n;j++)
{scanf("%d",&cost[i][j]);}}
printf("\n Enter the source Vertex:");
scanf("%d",&source);
print_path(source);
getch();}


9.)Kruskal’s Algorithm
#include <stdio.h>
#include <stdlib.h>
int cost[10][10], n;
int find(int node, int parent[10]){
while (parent[node] != node)
node = parent[node];
return node;}
void union_ij(inti,intj,intparent[10]){
if (i < j)
parent[j] =i;
else
parent[i] = j;}
void kruskal_mst(){
int count,i,j,parent[10],min,u,v,k,t[10][2],sum;
count=0,sum=0, k=0;
for (i = 0; i < n; i++)
parent[i] =i;
while (count<n-1){
min = 999;
for(i=0;i<n;i++){
for(j=0;j<n;j++){
if(cost[i][j]<min){
min=cost[i][j];
u=i;
v=j;}}}
if(min == 999) break;
i=find(u, parent);
j=find(v, parent);
if (i != j){
t[k][0] = u;
t[k][1] = v;
k++;
count++;
sum =sum +min;
union_ij(i, j, parent);
}cost[u][v]=cost[v][u]=999;
}if(count==n-1){
printf("\nSpanning Tree Exists");
printf("\nThe cost of MST = %d", sum);
printf("\nSpanning tree is shown below:");
for (k = 0; k < n - 1; k++)
printf("\n%d-->%d",t[k][0],t[k][1]);
return;} else
printf("\nSpanning tree do not exist");}
int main(){
int i,j;
printf("\n\n\tImplementation of 
Kruskal's algorithm\n\n");
printf("\nEnter the no. of vertices\n");
scanf("%d", &n);
printf("\nEnter the cost adjacency matrix\n");
for(i=0; i<n;i++){
for(j=0;j<n;j++) {
scanf("%d", &cost[i][j]);
if (cost[i][j] == 0)
cost[i][j] = 999;}}
kruskal_mst();
return 0;}

10.)SUM OF SUBSET
#include<stdio.h>
int count=0;
int w[10];
int d;
int x[10];
void subset(int cs,int k,int r)
{int i;
x[k]=1;
if(cs+w[k]==d)
{printf("\nSubset solution=%d\n",++count);
for(i=0;i<=k;i++){
if(x[i]==1)
printf("%d ",w[i]);}}
else if(cs+w[k]+w[k+1]<=d)
subset(cs+w[k],k+1,r-w[k]);
if((cs+r-w[k]>=d)&&(cs+w[k+1]<=d))
{x[k]=0;
subset(cs,k+1,r-w[k]);}}
void main()
{int sum=0,i,n;
printf("\nEnter the number of elements\n");
scanf("%d",&n);
printf("\nEnter the elements in 
ascending order:\n");
for(i=0;i<n;i++)
scanf("%d",&w[i]);
printf("\nEnter the required sum:");
scanf("%d",&d);
for(i=0;i<n;i++)
sum+=w[i];
if(sum<d)
{printf("\nNo solution exists\n");
return;}
printf("\nThe solution is:\n");
subset(0,0,sum);}






